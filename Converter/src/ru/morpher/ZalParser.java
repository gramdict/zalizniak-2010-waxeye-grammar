/*
 * Generated by the Waxeye Parser Generator - version 0.8.1
 * www.waxeye.org
 */
package ru.morpher;

import java.util.ArrayList;
import java.util.List;

import org.waxeye.parser.AutomatonTransition;
import org.waxeye.parser.CharTransition;
import org.waxeye.parser.Edge;
import org.waxeye.parser.FA;
import org.waxeye.parser.State;
import org.waxeye.parser.WildCardTransition;

/**
 * A parser generated by the Waxeye Parser Generator.
 *
 * @author Waxeye Parser Generator
 */
public final class ZalParser extends org.waxeye.parser.Parser<ZalType>
{
    /**
     * Creates a new ZalParser.
     */
    public ZalParser()
    {
        super(makeAutomata(), true, 0, ZalType._Empty, ZalType._Char, ZalType._Pos, ZalType._Neg);
    }

    /**
     * Builds the automata for the parser.
     *
     * @return The automata for the parser.
     */
    private static List<FA<ZalType>> makeAutomata()
    {
        final List<FA<ZalType>> automata = new ArrayList<FA<ZalType>>();

        initEntry(automata);
        initStressInfo(automata);
        initNoStress(automata);
        initNormallyNoStress(automata);
        initOftenNoStress(automata);
        initDefs(automata);
        initHomoNum(automata);
        initNumber(automata);
        initHeadword(automata);
        initDef(automata);
        initOpposite_aspects(automata);
        initOpposite_aspect(automata);
        initRomanNumber(automata);
        initOpposite_aspect_word(automata);
        initSee_also(automata);
        initExamples(automata);
        initExample(automata);
        initMultiword_index(automata);
        initIndex_variants(automata);
        initPlus(automata);
        initIdioms(automata);
        initIdiom(automata);
        initIrregular_forms(automata);
        initIrregular_form(automata);
        initCase(automata);
        initPlural_genitive(automata);
        initGenitive(automata);
        initForms(automata);
        initForm(automata);
        initStyle(automata);
        initOld(automata);
        initFolksy(automata);
        initProf(automata);
        initLocal(automata);
        initOfficial(automata);
        initAlt_entries(automata);
        initAlt_entry(automata);
        initSee(automata);
        initComma(automata);
        initExtras(automata);
        initExtra(automata);
        initSec_case(automata);
        initPreps(automata);
        initPrep(automata);
        initParagraph(automata);
        initNo_plural_genitive(automata);
        initDifficult_plural_genitive(automata);
        initDifficult_plural(automata);
        initYo(automata);
        initIndex_node(automata);
        initIndex0(automata);
        initIndex(automata);
        initLetter_seq(automata);
        initCircledNumbers(automata);
        initCircledNumberOpt(automata);
        initCircledNumberOptional(automata);
        initCircledNumber(automata);
        initAngle_index(automata);
        initSymbols(automata);
        initSymbol(automata);
        initIndex_number(automata);
        initScheme(automata);
        initSlash_scheme(automata);
        initComment(automata);
        initWs(automata);
        initLETTER(automata);
        initSTRESS_MARK(automata);
        initNewLine(automata);
        initNeg_68(automata);
        return automata;
    }

    private static void initEntry(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(1), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(5), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(5), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(5), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Entry, FA.LEFT, states));
    }

    private static void initStressInfo(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(2), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(3), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(4), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(2), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(3), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(4), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.StressInfo, FA.LEFT, states));
    }

    private static void initNoStress(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NoStress, FA.LEFT, states));
    }

    private static void initNormallyNoStress(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'л'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ь'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 18, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 19, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 20, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 21, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 22, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 23, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NormallyNoStress, FA.LEFT, states));
    }

    private static void initOftenNoStress(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ч'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 18, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 19, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.OftenNoStress, FA.LEFT, states));
    }

    private static void initDefs(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(9), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(9), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(9), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Defs, FA.PRUNE, states));
    }

    private static void initHomoNum(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.HomoNum, FA.LEFT, states));
    }

    private static void initNumber(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Number, FA.PRUNE, states));
    }

    private static void initHeadword(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(66), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Headword, FA.LEFT, states));
    }

    private static void initDef(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(58), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(39), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 12, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 15, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 16, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 17, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Def, FA.LEFT, states));
    }

    private static void initOpposite_aspects(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'◑'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'◑'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(11), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(11), 3, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Opposite_aspects, FA.LEFT, states));
    }

    private static void initOpposite_aspect(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(13), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Opposite_aspect, FA.LEFT, states));
    }

    private static void initRomanNumber(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'I'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'I'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'I'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.RomanNumber, FA.LEFT, states));
    }

    private static void initOpposite_aspect_word(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Opposite_aspect_word, FA.LEFT, states));
    }

    private static void initSee_also(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'к'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 14, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 15, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 15, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.See_also, FA.LEFT, states));
    }

    private static void initExamples(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{':'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(16), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(16), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(16), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(16), 3, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Examples, FA.LEFT, states));
    }

    private static void initExample(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(66), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' ', '?', '_', '—'}, new char[]{'(', ','}, new char[]{')', '/'}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(66), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' ', '?', '_', '—'}, new char[]{'(', ','}, new char[]{')', '/'}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Example, FA.PRUNE, states));
    }

    private static void initMultiword_index(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(18), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(19), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(18), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Multiword_index, FA.PRUNE, states));
    }

    private static void initIndex_variants(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(49), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(29), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(49), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(49), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Index_variants, FA.PRUNE, states));
    }

    private static void initPlus(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'+'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'+'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Plus, FA.VOID, states));
    }

    private static void initIdioms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✧'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✧'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(21), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(21), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(21), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(21), 4, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Idioms, FA.LEFT, states));
    }

    private static void initIdiom(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(66), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' ', '_'}, new char[]{'(', ','}, new char[]{')', '/'}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(66), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' ', '_'}, new char[]{'(', ','}, new char[]{')', '/'}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Idiom, FA.PRUNE, states));
    }

    private static void initIrregular_forms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'△'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'△'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 3, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Irregular_forms, FA.LEFT, states));
    }

    private static void initIrregular_form(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(27), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(27), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Irregular_form, FA.LEFT, states));
    }

    private static void initCase(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(25), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(26), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Case, FA.LEFT, states));
    }

    private static void initPlural_genitive(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Plural_genitive, FA.LEFT, states));
    }

    private static void initGenitive(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Genitive, FA.LEFT, states));
    }

    private static void initForms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Forms, FA.PRUNE, states));
    }

    private static void initForm(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(29), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Form, FA.LEFT, states));
    }

    private static void initStyle(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(30), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(31), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(34), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Style, FA.LEFT, states));
    }

    private static void initOld(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Old, FA.LEFT, states));
    }

    private static void initFolksy(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'э'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Folksy, FA.LEFT, states));
    }

    private static void initProf(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ф'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Prof, FA.LEFT, states));
    }

    private static void initLocal(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Local, FA.LEFT, states));
    }

    private static void initOfficial(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ф'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ц'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Official, FA.LEFT, states));
    }

    private static void initAlt_entries(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(36), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(36), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 6, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 7, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'='}, new char[]{}, new char[]{}), 10, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(36), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'='}, new char[]{}, new char[]{}), 10, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Alt_entries, FA.LEFT, states));
    }

    private static void initAlt_entry(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(29), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 6, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(37), 10, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(37), 10, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(9), 9, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(37), 10, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Alt_entry, FA.LEFT, states));
    }

    private static void initSee(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.See, FA.LEFT, states));
    }

    private static void initComma(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{','}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Comma, FA.VOID, states));
    }

    private static void initExtras(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(40), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(38), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(40), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Extras, FA.PRUNE, states));
    }

    private static void initExtra(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(47), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(46), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(45), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(48), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(44), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(41), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Extra, FA.PRUNE, states));
    }

    private static void initSec_case(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'П'}, new char[]{'Р'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'2'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(42), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Sec_case, FA.LEFT, states));
    }

    private static void initPreps(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(43), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{','}, new char[]{}, new char[]{}), 3, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(43), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(43), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Preps, FA.LEFT, states));
    }

    private static void initPrep(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Prep, FA.LEFT, states));
    }

    private static void initParagraph(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'§'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Paragraph, FA.LEFT, states));
    }

    private static void initNo_plural_genitive(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.No_plural_genitive, FA.LEFT, states));
    }

    private static void initDifficult_plural_genitive(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Difficult_plural_genitive, FA.LEFT, states));
    }

    private static void initDifficult_plural(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 6, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 18, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'г'}, new char[]{}, new char[]{}), 19, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 20, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 21, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 22, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 23, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'я'}, new char[]{}, new char[]{}), 24, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 25, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 26, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 27, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 28, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 29, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 30, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 31, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 32, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 33, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 34, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 35, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 36, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 37, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 38, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 39, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 40, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'й'}, new char[]{}, new char[]{}), 41, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 42, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 43, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 44, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 45, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 46, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 47, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Difficult_plural, FA.LEFT, states));
    }

    private static void initYo(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ё'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Yo, FA.LEFT, states));
    }

    private static void initIndex_node(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(57), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(50), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(51), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index_node, FA.PRUNE, states));
    }

    private static void initIndex0(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'0'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index0, FA.LEFT, states));
    }

    private static void initIndex(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(60), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'*'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(61), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(61), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 4, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(53), 8, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'⌧'}, new char[]{}, new char[]{}), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'—'}, new char[]{}, new char[]{}), 10, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✕'}, new char[]{}, new char[]{}), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'0'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(53), 8, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'⌧'}, new char[]{}, new char[]{}), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'—'}, new char[]{}, new char[]{}), 10, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✕'}, new char[]{}, new char[]{}), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'⌧'}, new char[]{}, new char[]{}), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'—'}, new char[]{}, new char[]{}), 10, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✕'}, new char[]{}, new char[]{}), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'—'}, new char[]{}, new char[]{}), 10, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✕'}, new char[]{}, new char[]{}), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✕'}, new char[]{}, new char[]{}), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'~'}, new char[]{}, new char[]{}), 12, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'÷'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(52), 14, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index, FA.LEFT, states));
    }

    private static void initLetter_seq(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(65), 4, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Letter_seq, FA.LEFT, states));
    }

    private static void initCircledNumbers(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(54), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(54), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.CircledNumbers, FA.LEFT, states));
    }

    private static void initCircledNumberOpt(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(56), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(55), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.CircledNumberOpt, FA.LEFT, states));
    }

    private static void initCircledNumberOptional(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(56), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.CircledNumberOptional, FA.LEFT, states));
    }

    private static void initCircledNumber(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'①'}, new char[]{'⑨'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.CircledNumber, FA.LEFT, states));
    }

    private static void initAngle_index(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'<'}, new char[]{}, new char[]{}), 1, true));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(59), 6, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(59), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(51), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(51), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'>'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(51), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(51), 5, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Angle_index, FA.LEFT, states));
    }

    private static void initSymbols(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(59), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'§'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(59), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'1'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'2'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Symbols, FA.PRUNE, states));
    }

    private static void initSymbol(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ч'}, new char[]{}, new char[]{}), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 19, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 27, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ф'}, new char[]{}, new char[]{}), 29, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 30, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 31, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 36, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 41, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 46, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 50, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 51, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 52, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ю'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 17, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'к'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 20, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 26, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 22, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 23, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 24, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 25, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'⁺'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 28, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'⁺'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 32, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 33, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 34, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 35, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 37, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 38, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 39, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 40, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 42, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 43, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 44, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 45, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 47, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 48, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 49, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 53, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 54, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 55, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'л'}, new char[]{}, new char[]{}), 56, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Symbol, FA.LEFT, states));
    }

    private static void initIndex_number(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index_number, FA.PRUNE, states));
    }

    private static void initScheme(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'a'}, new char[]{'f'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(62), 4, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(62), 4, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(62), 4, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Scheme, FA.LEFT, states));
    }

    private static void initSlash_scheme(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'a'}, new char[]{'c'}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Slash_scheme, FA.LEFT, states));
    }

    private static void initComment(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(64), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(63), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(68), 3, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new WildCardTransition<ZalType>(), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Comment, FA.VOID, states));
    }

    private static void initWs(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Ws, FA.VOID, states));
    }

    private static void initLETTER(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Ё', 'ё'}, new char[]{'А'}, new char[]{'я'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.LETTER, FA.PRUNE, states));
    }

    private static void initSTRESS_MARK(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'̀'}, new char[]{'́'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.STRESS_MARK, FA.PRUNE, states));
    }

    private static void initNewLine(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\r'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\n'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\r'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\n'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NewLine, FA.VOID, states));
    }

    private static void initNeg_68(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType._Neg, FA.VOID, states));
    }

}
