/*
 * Generated by the Waxeye Parser Generator - version 0.8.1
 * www.waxeye.org
 */
package ru.morpher;

import java.util.ArrayList;
import java.util.List;

import org.waxeye.parser.AutomatonTransition;
import org.waxeye.parser.CharTransition;
import org.waxeye.parser.Edge;
import org.waxeye.parser.FA;
import org.waxeye.parser.State;
import org.waxeye.parser.WildCardTransition;

/**
 * A parser generated by the Waxeye Parser Generator.
 *
 * @author Waxeye Parser Generator
 */
public final class ZalParser extends org.waxeye.parser.Parser<ZalType>
{
    /**
     * Creates a new ZalParser.
     */
    public ZalParser()
    {
        super(makeAutomata(), true, 0, ZalType._Empty, ZalType._Char, ZalType._Pos, ZalType._Neg);
    }

    /**
     * Builds the automata for the parser.
     *
     * @return The automata for the parser.
     */
    private static List<FA<ZalType>> makeAutomata()
    {
        final List<FA<ZalType>> automata = new ArrayList<FA<ZalType>>();

        initEntry(automata);
        initStressInfo(automata);
        initNoStress(automata);
        initNormallyNoStress(automata);
        initDefs(automata);
        initHomoNum(automata);
        initNumber(automata);
        initHeadword(automata);
        initDef(automata);
        initIndex_sep(automata);
        initSlash_slash(automata);
        initPlus(automata);
        initIdioms(automata);
        initIdiom(automata);
        initIrregular_forms(automata);
        initIrregular_form(automata);
        initIrregular_plural_gen(automata);
        initForms(automata);
        initForm(automata);
        initStyle(automata);
        initOld(automata);
        initFolksy(automata);
        initAlt_lemma(automata);
        initComma(automata);
        initExtras(automata);
        initExtra(automata);
        initDifficult_plural_genitive(automata);
        initDifficult_plural(automata);
        initIndex(automata);
        initMain_symbol(automata);
        initIndex_number(automata);
        initScheme(automata);
        initComment(automata);
        initWs(automata);
        initLETTER(automata);
        initSTRESS_MARK(automata);
        initNewLine(automata);
        initNeg_37(automata);
        return automata;
    }

    private static void initEntry(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(5), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(1), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(4), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Entry, FA.LEFT, states));
    }

    private static void initStressInfo(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(2), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(3), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(2), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(3), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.StressInfo, FA.LEFT, states));
    }

    private static void initNoStress(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NoStress, FA.LEFT, states));
    }

    private static void initNormallyNoStress(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'л'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ь'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 18, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 19, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 20, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 21, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 22, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 23, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NormallyNoStress, FA.LEFT, states));
    }

    private static void initDefs(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Defs, FA.PRUNE, states));
    }

    private static void initHomoNum(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.HomoNum, FA.LEFT, states));
    }

    private static void initNumber(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'0'}, new char[]{'9'}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Number, FA.PRUNE, states));
    }

    private static void initHeadword(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(34), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(34), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Headword, FA.LEFT, states));
    }

    private static void initDef(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(29), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 4, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(9), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(28), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(24), 7, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(14), 8, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 9, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(12), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(22), 11, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Def, FA.LEFT, states));
    }

    private static void initIndex_sep(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(10), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(11), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index_sep, FA.PRUNE, states));
    }

    private static void initSlash_slash(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Slash_slash, FA.LEFT, states));
    }

    private static void initPlus(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'+'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'+'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Plus, FA.LEFT, states));
    }

    private static void initIdioms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✧'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'✧'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 3, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(13), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(13), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{';'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 6, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(13), 7, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(13), 7, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Idioms, FA.LEFT, states));
    }

    private static void initIdiom(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(34), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{'(', ','}, new char[]{')', '-'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(34), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(35), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{'(', ','}, new char[]{')', '-'}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Idiom, FA.PRUNE, states));
    }

    private static void initIrregular_forms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'△'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'△'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(15), 3, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Irregular_forms, FA.LEFT, states));
    }

    private static void initIrregular_form(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(16), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Irregular_form, FA.PRUNE, states));
    }

    private static void initIrregular_plural_gen(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 10, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 11, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(17), 11, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Irregular_plural_gen, FA.LEFT, states));
    }

    private static void initForms(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(18), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 5, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(18), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(18), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Forms, FA.PRUNE, states));
    }

    private static void initForm(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(19), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Form, FA.LEFT, states));
    }

    private static void initStyle(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(20), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(21), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Style, FA.LEFT, states));
    }

    private static void initOld(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Old, FA.LEFT, states));
    }

    private static void initFolksy(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'э'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Folksy, FA.LEFT, states));
    }

    private static void initAlt_lemma(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'['}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'/'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(19), 5, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(7), 8, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 11, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(8), 12, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{']'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Alt_lemma, FA.LEFT, states));
    }

    private static void initComma(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{','}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Comma, FA.VOID, states));
    }

    private static void initExtras(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(25), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(23), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(25), 1, false));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Extras, FA.PRUNE, states));
    }

    private static void initExtra(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(27), 1, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(26), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Extra, FA.PRUNE, states));
    }

    private static void initDifficult_plural_genitive(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Р'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 6, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Difficult_plural_genitive, FA.LEFT, states));
    }

    private static void initDifficult_plural(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 1, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 2, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 3, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 4, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 5, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 6, true));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 15, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 7, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 8, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 9, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'у'}, new char[]{}, new char[]{}), 10, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 11, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 12, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 13, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 16, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 17, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 18, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'г'}, new char[]{}, new char[]{}), 19, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 20, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 21, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 22, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 23, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'я'}, new char[]{}, new char[]{}), 24, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 25, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 26, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 27, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 28, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 29, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 30, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 31, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 32, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 33, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'в'}, new char[]{}, new char[]{}), 34, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 35, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 36, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 37, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 38, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 39, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 40, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'й'}, new char[]{}, new char[]{}), 41, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 42, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 43, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'_'}, new char[]{}, new char[]{}), 44, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{' '}, new char[]{}, new char[]{}), 45, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 46, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 47, true));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'б'}, new char[]{}, new char[]{}), 14, true));
        states.add(new State<ZalType>(edges, false));
        automata.add(new FA<ZalType>(ZalType.Difficult_plural, FA.LEFT, states));
    }

    private static void initIndex(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(30), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'0'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'*'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(31), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(31), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'—'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index, FA.LEFT, states));
    }

    private static void initMain_symbol(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 6, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ч'}, new char[]{}, new char[]{}), 9, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 13, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'м'}, new char[]{}, new char[]{}), 19, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 23, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 24, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'п'}, new char[]{}, new char[]{}), 5, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'н'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 7, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ю'}, new char[]{}, new char[]{}), 8, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'з'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'а'}, new char[]{}, new char[]{}), 10, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'с'}, new char[]{}, new char[]{}), 11, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'т'}, new char[]{}, new char[]{}), 12, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'р'}, new char[]{}, new char[]{}), 14, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'е'}, new char[]{}, new char[]{}), 15, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'д'}, new char[]{}, new char[]{}), 16, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'и'}, new char[]{}, new char[]{}), 17, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'к'}, new char[]{}, new char[]{}), 18, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'.'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 20, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'-'}, new char[]{}, new char[]{}), 21, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'ж'}, new char[]{}, new char[]{}), 22, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'о'}, new char[]{}, new char[]{}), 5, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Main_symbol, FA.LEFT, states));
    }

    private static void initIndex_number(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(6), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Index_number, FA.PRUNE, states));
    }

    private static void initScheme(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'a'}, new char[]{'f'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\''}, new char[]{}, new char[]{}), 3, false));
        states.add(new State<ZalType>(edges, true));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Scheme, FA.LEFT, states));
    }

    private static void initComment(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(33), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'('}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(32), 2, false));
        edges.add(new Edge<ZalType>(new AutomatonTransition<ZalType>(37), 3, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 4, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new WildCardTransition<ZalType>(), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Comment, FA.VOID, states));
    }

    private static void initWs(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\t', ' '}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.Ws, FA.VOID, states));
    }

    private static void initLETTER(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'Ё', 'ё'}, new char[]{'А'}, new char[]{'я'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.LETTER, FA.PRUNE, states));
    }

    private static void initSTRESS_MARK(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{}, new char[]{'̀'}, new char[]{'́'}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.STRESS_MARK, FA.PRUNE, states));
    }

    private static void initNewLine(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\r'}, new char[]{}, new char[]{}), 1, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\n'}, new char[]{}, new char[]{}), 2, false));
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\r'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{'\n'}, new char[]{}, new char[]{}), 2, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType.NewLine, FA.VOID, states));
    }

    private static void initNeg_37(List<FA<ZalType>> automata) {
        List<State<ZalType>> states = new ArrayList<State<ZalType>>();
        List<Edge<ZalType>> edges;
        edges = new ArrayList<Edge<ZalType>>();
        edges.add(new Edge<ZalType>(new CharTransition<ZalType>(new char[]{')'}, new char[]{}, new char[]{}), 1, false));
        states.add(new State<ZalType>(edges, false));
        edges = new ArrayList<Edge<ZalType>>();
        states.add(new State<ZalType>(edges, true));
        automata.add(new FA<ZalType>(ZalType._Neg, FA.VOID, states));
    }

}
